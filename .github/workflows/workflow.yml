name: Codebase Workflow

# To run this workflow, all you need to do is push to main branch
on:
  pull_request:
    branches:
      - main
      - devel
      - stage
  push:
    branches:
      - main
      - devel
      - stage
env:
  WORKING_DIRECTORY: codebase/rdicidr-0.1.0 # change this to the directory with the source
  ARTIFACT_S3_BUCKET: rdicidr-artifacts # change this to the name of the S3 bucket you want to upload to
  AWS_REGION: us-east-1 # change this to the region of your S3 bucket

jobs:
  build-and-test:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15'  # Use the Node.js version you need

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm install

      - name: Linter (ESLint)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Formatter (Prettier)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run prettier

      - name: Test (Jest)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: CI=true npm run test

      - name: Build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Upload to S3
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: ${{ env.WORKING_DIRECTORY }}/build
  save-to-s3: # we could just deploy right to web with terraform, but best practice to keep build artifacts stored permanently
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: artifact
          # full website is now in ./artifact folder

      - name: Extract branch name
        id: branch_name
        run: echo "##[set-output name=branch;]$(basename ${{ github.ref }})"
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}

      - name: Delete existing files in S3 branch folder
        run: aws s3 rm s3://${{ env.ARTIFACT_S3_BUCKET }}/${{ steps.branch_name.outputs.branch }} --recursive

      - name: Upload to S3 branch folder
        run: aws s3 cp artifact s3://${{ env.ARTIFACT_S3_BUCKET }}/${{ steps.branch_name.outputs.branch }} --recursive
  terraform-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0  # Change to the desired Terraform version

      - name: Deploy Website with Terraform
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="website_bucket=${{ env.ARTIFACT_S3_BUCKET }}" \
            -var="environments=[\"main\", \"devel\", \"stage\"]"

      - name: Display Environment URLs
        run: |
          echo "Main Environment URL: ${{ steps.deploy.outputs.environment_endpoints_main }}"
          echo "Devel Environment URL: ${{ steps.deploy.outputs.environment_endpoints_devel }}"
          echo "Stage Environment URL: ${{ steps.deploy.outputs.environment_endpoints_stage }}"
        env:
          ENVIRONMENT_ENDPOINTS_MAIN: ${{ fromJson(steps.deploy.outputs.environment_endpoints).main }}
          ENVIRONMENT_ENDPOINTS_DEVEL: ${{ fromJson(steps.deploy.outputs.environment_endpoints).devel }}
          ENVIRONMENT_ENDPOINTS_STAGE: ${{ fromJson(steps.deploy.outputs.environment_endpoints).stage }}

    outputs:
      environment_endpoints: ${{ steps.deploy.outputs.environment_endpoints }}

